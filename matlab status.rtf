{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20000\viewh17580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 Outstanding issues
\f1\b0 \ulnone \
- My HMatrix class rather relies on having a matrix stored on disk. Probably what makes most sense is to save something to disk from the Olaf code, and for my code to load it. As long as I can do that once at start of day, that should be fairly straightforward.\
- Note that the Olaf code does not seem to make use of CAindex. I\'92m not sure why it doesn\'92t, but that does make for unnecessary work. If I want to get the full speed out of Olaf calling my code, I will need to reinstate that I think. \
\

\f0\b \ul Performance in Prevedel\'92s code (Macbook Pro)
\f1\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ulnone For my test worm image, Prevedel\'92s code takes 14.5 + 31.2 for iterations 0 and 1. Mine takes 11.6 and 22.7 after priming. So for this small-sized task it\'92s about 1.3x faster (on a single timepoint).\
\
See below for performance measurements of my code being called from Matlab (confirming that there is almost no overhead of doing so)\
\
Note that at the moment when running x30 with my own original chosen benchmark I get a 14.5x speedup compared to Matlab (Mac Pro, vs 2019a) and 7.5x speedup (Macbook Pro, vs 2020a).\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 \ul Low-priority issues
\f1\b0 \ulnone \
- On beag-shuil, it won\'92t accept /usr/bin/python3.5 for some reason (\'93path argument does not specify a valid executable\'94). I can however run with /usr/bin/python2.7 and matlab 2018a (although I presume there will be later issues as my code probably expects Python 3.x).\
\
\
\

\f0\b \ul Performance of my code being called from Matlab
\f1\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ulnone Comparing different code, with a relatively small problem (Olaf image but only 3 z planes reconstructed - PSFmatrix_M22.222NA0.5MLPitch125fml3125from-5to5zspacing5Nnum19lambda520n1.33.mat)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ul Running with matlab calling python (with me using the computer at the same time)\ulnone \
Batch size = 4\
\
  iter 0 | 4, took 14.1458 secs\
  iter 1 | 4, took 27.8875 secs\
  iter 2 | 4, took 28.1853 secs\
  iter 3 | 4, took 28.1724 secs\
  iter 4 | 4, took 28.2487 secs\
\
\ul Running with pure python (with me using the computer a little at the same time)\ulnone \
Backward project: elapsed wallclock time 14.149100\
Forward project: elapsed wallclock time 14.042516\
Backward project: elapsed wallclock time 14.560760 = 28.6\
Forward project: elapsed wallclock time 14.516958\
Backward project: elapsed wallclock time 14.526965 = 29.04\
Forward project: elapsed wallclock time 14.794596\
Backward project: elapsed wallclock time 14.546867 = 29.34\
Forward project: elapsed wallclock time 14.322631\
Backward project: elapsed wallclock time 14.259231 = 28.58\
 time: 129.80. overall delta rusage: [492.89832   13.119777]\
\
\ul Running with pure matlab (with me using the computer at the same time)\ulnone \
Batch size = 1 of course.\
Exact run times varied a bit between frames, but that doesn\'92t matter much as this investigation wasn\'92t primarily about performance of the pure matlab code.\
\
  iter 0 | 4, took 10.9367 secs\
  iter 1 | 4, took 19.4783 secs\
  iter 2 | 4, took 18.6894 secs\
  iter 3 | 4, took 18.1297 secs\
  iter 4 | 4, took 18.9762 secs\
Complete calculation took 86.2263 secs}