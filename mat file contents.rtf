{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21260\viewh16500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Some draft notes on what is stored in the .mat file\

\b0 Note: these are very early notes and I think I have since significantly improved my understanding of this - needs updating.\
\
\

\b \

\b0 \
Objects stored in the .mat file\
\
###Optical parameters from GUI: [? means I am not sure if or where it is stored]\
\
M<br>\
NA<br>\
d    "fml" in GUI (stored here in units of m)<br>\
pixelPitch is "ML pitch" / "Nnum" (stored here in units of m)<br>\
? n<br>\
? wavelength<br>\
\
### User parameters from GUI:\
\
OSR<br>\
zspacing<br>\
? z-min<br>\
? z-max<br>\
Nnum<br>\
\
\
### Misc parameter:\
\
fobj (can presumably be deduced from mag, NA etc?)<br>\
\
### The actual arrays:\
\
H:             shape (56, 19, 19, 343, 343), type "f4"<br>\
Ht:            shape (56, 19, 19, 343, 343), type "f4"<br>\
\
### Information about object space:\
\
x1objspace:    x pixel positions in object space (19 elements across one lenslet)<br>\
x2objspace:    y pixel positions in object space (19 elements across one lenslet)<br>\
x3objspace:    z pixel positions in object space (56 z planes)<br>\
x1space:       x pixel positions in lenslet space (19 elements across one lenslet)<br>\
x2space:       y pixel positions in lenslet space (19 elements across one lenslet)<br>\
\
### Not sure what these are exactly:\
\
CAindex:       shape (2, 56) - something about the start and end index of the PSF array, for each z plane.<br>\
CP:            shape (343, 1)<br>\
MLARRAY:       shape (1141, 1141), type "|V16"<br>\
objspace:      shape (56, 1, 1)<br>\
settingPSF:    You would think this contains the GUI parameters, but e.g. print(f['settingPSF']['M'].value) gives a strange 3x1 array [50, 50, 46, 50] etc...?<br>\
\
\
\
 Note: I am a little unsure how to interpret the arrays I have loaded from the .mat.\
 From looking at how H and CAindex are accessed, it looks as if the shapes I have loaded\
 are the reversal of the shape ordering as expected in Matlab.\
 I suppose that makes sense given that matlab is column-major in its array accesses.\
 The data has been loaded from disk in the order it is *stored*,\
 and I therefore need to flip around all the matlab array index ordering \
 (e.g. matlabArray(1,2,3) becomes pythonArray[3,2,1])}