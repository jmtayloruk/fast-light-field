{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18540\viewh16760\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 Introduction\

\b0\fs24 \ulnone These instructions assume a basic familiarity with the command line, and with python - and that you already have a basic python 3 installation on your computer.\

\b\fs28 \ul \
To clone from git server (not currently publicly accessible)
\b0\fs24 \ulnone \

\i No need to do this, as I have sent you the entire light-field-flow project as a zip file.
\i0 \
\
git clone https://jmtaylor@bitbucket.org/jmtaylor/light-field-flow.git\
git submodule init; git submodule update\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b\fs28 \cf0 \ul \ulc0 Setting up, starting from a pre-provided light-field-flow directory
\b0\fs24 \ulnone \
You have a choice of whether you want to use a python virtual environment or not. If you don\'92t know what that is, just follow the \'93installing in user space\'94 instructions\
\
# Start in the light-field-flow directory\
cd light-field-flow\
#======== If using a virtual environment ========\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
python3 -m venv lff-venv\kerning1\expnd0\expndtw0 \
\expnd0\expndtw0\kerning0
. ./lff-venv/bin/activate\
# To install dependencies\kerning1\expnd0\expndtw0 \
\expnd0\expndtw0\kerning0
python3 -m pip install -r requirements_minimum.txt\kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 #Optional, if you want GPU support:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
python3 -m \kerning1\expnd0\expndtw0 pip install cupy pycuda pynvml\
# Get everything set up for the light-field-flow code (this will take 5-10 minutes)\
python3 setup.py build self-test\
\
#==== Or if installing modules in the user space ====\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
python3 -m pip install --user -r requirements_minimum.txt\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 #Optional, if you want GPU support:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
python3 -m \kerning1\expnd0\expndtw0 pip install --user cupy pycuda pynvml\
# Get everything set up for the light-field-flow code (this will take 5-10 minutes)\
python3 setup.py --user build self-test\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
#======================================\
\
If all is well, you will get a 
\i lot
\i0  of output on the command line, but ultimately it should end with a green line reading \'93== Self-tests complete (passed 24/24) ==\'93. \
If something goes wrong, please just drop me an email.\
\kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b\fs28 \cf0 \ul \ulc0 Setting up, starting from a pre-provided light-field-flow directory
\b0\fs24 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 For now, you will need to use the Prevedel Matlab code to 
\i rectify
\i0  your light field images according to your experimental parameters - I have not yet got round to porting that (small) code to python.\
\
Once you have got your rectified images, you should just be able to run this deconvolution code. At the moment the code expects every image to be in a separate (2D) tiff file (which is the output format generated by Prevedel\'92s rectification script). You invoke my deconvolution script with a command like:\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 python deconvolve_time_series.py --psf "PSFmatrix/fdnormPSFMatrix_M22.2NA0.5MLPitch125fml3125from-156to156zspacing4Nnum19lambda520n1.33.mat" --dest DeconvolvedOutput --timepoints RectifiedInputData/*.tif
\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 where:\
\'93DeconvolvedOutput\'94 is the name of a folder into which your deconvolved images will be saved\
\'93RectifiedInputData\'94 is the name of a folder in which your rectified images can be found. This example deconvolves every image in the folder, but you can of course replace the \'93*.tif\'94 to be more specific, and/or list more than one individual file you want to deconvolve\
In this example there is a folder \'93PSFmatrix\'94 which will contain the light field PSF. If the matrix file you specify does not exist, my code will automatically generate the file according to the parameters in the filename. These are the same as in Prevedel\'92s code:\
M - magnification\
NA - numerical aperture\
MLPitch - microlens pitch (\'b5m)\
fml - microlens focal length (\'b5m)\
from/to/zspacing - z stack dimensions (\'b5m)\
Nnum - number of pixels in your rectified image, across each microlens footprint\
lambda - wavelength (nm)\
n - refractive index of medium\

\i Note that in the filename it is important not to have any trailing zeroes, e.g. you should write \'93\'85lambda520n1.mat\'94 not \'93\'85lambda520n1.0.mat\'92.\
}